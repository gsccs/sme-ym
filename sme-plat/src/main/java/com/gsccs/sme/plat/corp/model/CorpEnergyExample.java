package com.gsccs.sme.plat.corp.model;

import java.util.ArrayList;
import java.util.List;

import com.gsccs.sme.plat.bass.BaseExample;

public class CorpEnergyExample extends BaseExample{
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to
	 * the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	protected String orderByClause;

	/**
	 * This field was generated by MyBatis Generator. This field corresponds to
	 * the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	protected boolean distinct;

	/**
	 * This field was generated by MyBatis Generator. This field corresponds to
	 * the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public CorpEnergyExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	public boolean isDistinct() {
		return distinct;
	}

	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to
	 * the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return (Criteria) this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return (Criteria) this;
		}

		public Criteria andIdEqualTo(Long value) {
			addCriterion("id =", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotEqualTo(Long value) {
			addCriterion("id <>", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThan(Long value) {
			addCriterion("id >", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Long value) {
			addCriterion("id >=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThan(Long value) {
			addCriterion("id <", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThanOrEqualTo(Long value) {
			addCriterion("id <=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdIn(List<Long> values) {
			addCriterion("id in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotIn(List<Long> values) {
			addCriterion("id not in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdBetween(Long value1, Long value2) {
			addCriterion("id between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotBetween(Long value1, Long value2) {
			addCriterion("id not between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andYearIsNull() {
			addCriterion("year is null");
			return (Criteria) this;
		}

		public Criteria andYearIsNotNull() {
			addCriterion("year is not null");
			return (Criteria) this;
		}

		public Criteria andYearEqualTo(Integer value) {
			addCriterion("year =", value, "year");
			return (Criteria) this;
		}

		public Criteria andYearNotEqualTo(Integer value) {
			addCriterion("year <>", value, "year");
			return (Criteria) this;
		}

		public Criteria andYearGreaterThan(Integer value) {
			addCriterion("year >", value, "year");
			return (Criteria) this;
		}

		public Criteria andYearGreaterThanOrEqualTo(Integer value) {
			addCriterion("year >=", value, "year");
			return (Criteria) this;
		}

		public Criteria andYearLessThan(Integer value) {
			addCriterion("year <", value, "year");
			return (Criteria) this;
		}

		public Criteria andYearLessThanOrEqualTo(Integer value) {
			addCriterion("year <=", value, "year");
			return (Criteria) this;
		}

		public Criteria andYearIn(List<Integer> values) {
			addCriterion("year in", values, "year");
			return (Criteria) this;
		}

		public Criteria andYearNotIn(List<Integer> values) {
			addCriterion("year not in", values, "year");
			return (Criteria) this;
		}

		public Criteria andYearBetween(Integer value1, Integer value2) {
			addCriterion("year between", value1, value2, "year");
			return (Criteria) this;
		}

		public Criteria andYearNotBetween(Integer value1, Integer value2) {
			addCriterion("year not between", value1, value2, "year");
			return (Criteria) this;
		}

		public Criteria andMonthIsNull() {
			addCriterion("month is null");
			return (Criteria) this;
		}

		public Criteria andMonthIsNotNull() {
			addCriterion("month is not null");
			return (Criteria) this;
		}

		public Criteria andMonthEqualTo(Integer value) {
			addCriterion("month =", value, "month");
			return (Criteria) this;
		}

		public Criteria andMonthNotEqualTo(Integer value) {
			addCriterion("month <>", value, "month");
			return (Criteria) this;
		}

		public Criteria andCorpidEqualTo(Long value) {
			addCriterion("corpid =", value, "corpid");
			return (Criteria) this;
		}

		public Criteria andMonthBetween(Integer value1, Integer value2) {
			addCriterion("month between", value1, value2, "month");
			return (Criteria) this;
		}

		public Criteria andMonthNotBetween(Integer value1, Integer value2) {
			addCriterion("month not between", value1, value2, "month");
			return (Criteria) this;
		}

		public Criteria andGrossnumIsNull() {
			addCriterion("grossnum is null");
			return (Criteria) this;
		}

		public Criteria andGrossnumIsNotNull() {
			addCriterion("grossnum is not null");
			return (Criteria) this;
		}

		public Criteria andGrossnumEqualTo(Float value) {
			addCriterion("grossnum =", value, "grossnum");
			return (Criteria) this;
		}

		public Criteria andGrossnumGreaterThan(Float value) {
			addCriterion("grossnum >", value, "grossnum");
			return (Criteria) this;
		}

		public Criteria andGrossnumBetween(Float value1, Float value2) {
			addCriterion("grossnum between", value1, value2, "grossnum");
			return (Criteria) this;
		}

		public Criteria andGrossnumNotBetween(Float value1, Float value2) {
			addCriterion("grossnum not between", value1, value2, "grossnum");
			return (Criteria) this;
		}

		public Criteria andAddednumIsNull() {
			addCriterion("addednum is null");
			return (Criteria) this;
		}

		public Criteria andAddednumIsNotNull() {
			addCriterion("addednum is not null");
			return (Criteria) this;
		}

		public Criteria andAddednumEqualTo(Float value) {
			addCriterion("addednum =", value, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumNotEqualTo(Float value) {
			addCriterion("addednum <>", value, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumGreaterThan(Float value) {
			addCriterion("addednum >", value, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumGreaterThanOrEqualTo(Float value) {
			addCriterion("addednum >=", value, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumLessThan(Float value) {
			addCriterion("addednum <", value, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumLessThanOrEqualTo(Float value) {
			addCriterion("addednum <=", value, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumIn(List<Float> values) {
			addCriterion("addednum in", values, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumNotIn(List<Float> values) {
			addCriterion("addednum not in", values, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumBetween(Float value1, Float value2) {
			addCriterion("addednum between", value1, value2, "addednum");
			return (Criteria) this;
		}

		public Criteria andAddednumNotBetween(Float value1, Float value2) {
			addCriterion("addednum not between", value1, value2, "addednum");
			return (Criteria) this;
		}

		public Criteria andAllnumIsNull() {
			addCriterion("allnum is null");
			return (Criteria) this;
		}

		public Criteria andAllnumIsNotNull() {
			addCriterion("allnum is not null");
			return (Criteria) this;
		}

		public Criteria andAllnumEqualTo(Float value) {
			addCriterion("allnum =", value, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumNotEqualTo(Float value) {
			addCriterion("allnum <>", value, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumGreaterThan(Float value) {
			addCriterion("allnum >", value, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumGreaterThanOrEqualTo(Float value) {
			addCriterion("allnum >=", value, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumLessThan(Float value) {
			addCriterion("allnum <", value, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumLessThanOrEqualTo(Float value) {
			addCriterion("allnum <=", value, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumIn(List<Float> values) {
			addCriterion("allnum in", values, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumNotIn(List<Float> values) {
			addCriterion("allnum not in", values, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumBetween(Float value1, Float value2) {
			addCriterion("allnum between", value1, value2, "allnum");
			return (Criteria) this;
		}

		public Criteria andAllnumNotBetween(Float value1, Float value2) {
			addCriterion("allnum not between", value1, value2, "allnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumIsNull() {
			addCriterion("electrnum is null");
			return (Criteria) this;
		}

		public Criteria andElectrnumIsNotNull() {
			addCriterion("electrnum is not null");
			return (Criteria) this;
		}

		public Criteria andElectrnumEqualTo(Float value) {
			addCriterion("electrnum =", value, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumNotEqualTo(Float value) {
			addCriterion("electrnum <>", value, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumGreaterThan(Float value) {
			addCriterion("electrnum >", value, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumGreaterThanOrEqualTo(Float value) {
			addCriterion("electrnum >=", value, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumLessThan(Float value) {
			addCriterion("electrnum <", value, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumLessThanOrEqualTo(Float value) {
			addCriterion("electrnum <=", value, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumIn(List<Float> values) {
			addCriterion("electrnum in", values, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumNotIn(List<Float> values) {
			addCriterion("electrnum not in", values, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumBetween(Float value1, Float value2) {
			addCriterion("electrnum between", value1, value2, "electrnum");
			return (Criteria) this;
		}

		public Criteria andElectrnumNotBetween(Float value1, Float value2) {
			addCriterion("electrnum not between", value1, value2, "electrnum");
			return (Criteria) this;
		}

		public Criteria andWaternumIsNull() {
			addCriterion("waternum is null");
			return (Criteria) this;
		}

		public Criteria andWaternumIsNotNull() {
			addCriterion("waternum is not null");
			return (Criteria) this;
		}

		public Criteria andWaternumEqualTo(Float value) {
			addCriterion("waternum =", value, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumNotEqualTo(Float value) {
			addCriterion("waternum <>", value, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumGreaterThan(Float value) {
			addCriterion("waternum >", value, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumGreaterThanOrEqualTo(Float value) {
			addCriterion("waternum >=", value, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumLessThan(Float value) {
			addCriterion("waternum <", value, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumLessThanOrEqualTo(Float value) {
			addCriterion("waternum <=", value, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumIn(List<Float> values) {
			addCriterion("waternum in", values, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumNotIn(List<Float> values) {
			addCriterion("waternum not in", values, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumBetween(Float value1, Float value2) {
			addCriterion("waternum between", value1, value2, "waternum");
			return (Criteria) this;
		}

		public Criteria andWaternumNotBetween(Float value1, Float value2) {
			addCriterion("waternum not between", value1, value2, "waternum");
			return (Criteria) this;
		}

		public Criteria andGrosspowerIsNull() {
			addCriterion("grosspower is null");
			return (Criteria) this;
		}

		public Criteria andGrosspowerIsNotNull() {
			addCriterion("grosspower is not null");
			return (Criteria) this;
		}

		public Criteria andGrosspowerEqualTo(Float value) {
			addCriterion("grosspower =", value, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerNotEqualTo(Float value) {
			addCriterion("grosspower <>", value, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerGreaterThan(Float value) {
			addCriterion("grosspower >", value, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerGreaterThanOrEqualTo(Float value) {
			addCriterion("grosspower >=", value, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerLessThan(Float value) {
			addCriterion("grosspower <", value, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerLessThanOrEqualTo(Float value) {
			addCriterion("grosspower <=", value, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerIn(List<Float> values) {
			addCriterion("grosspower in", values, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerNotIn(List<Float> values) {
			addCriterion("grosspower not in", values, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerBetween(Float value1, Float value2) {
			addCriterion("grosspower between", value1, value2, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosspowerNotBetween(Float value1, Float value2) {
			addCriterion("grosspower not between", value1, value2, "grosspower");
			return (Criteria) this;
		}

		public Criteria andGrosselectrIsNull() {
			addCriterion("grosselectr is null");
			return (Criteria) this;
		}

		public Criteria andGrosselectrIsNotNull() {
			addCriterion("grosselectr is not null");
			return (Criteria) this;
		}

		public Criteria andGrosselectrEqualTo(Float value) {
			addCriterion("grosselectr =", value, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrNotEqualTo(Float value) {
			addCriterion("grosselectr <>", value, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrGreaterThan(Float value) {
			addCriterion("grosselectr >", value, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrGreaterThanOrEqualTo(Float value) {
			addCriterion("grosselectr >=", value, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrLessThan(Float value) {
			addCriterion("grosselectr <", value, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrLessThanOrEqualTo(Float value) {
			addCriterion("grosselectr <=", value, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrIn(List<Float> values) {
			addCriterion("grosselectr in", values, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrNotIn(List<Float> values) {
			addCriterion("grosselectr not in", values, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrBetween(Float value1, Float value2) {
			addCriterion("grosselectr between", value1, value2, "grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosselectrNotBetween(Float value1, Float value2) {
			addCriterion("grosselectr not between", value1, value2,
					"grosselectr");
			return (Criteria) this;
		}

		public Criteria andGrosswaterIsNull() {
			addCriterion("grosswater is null");
			return (Criteria) this;
		}

		public Criteria andGrosswaterIsNotNull() {
			addCriterion("grosswater is not null");
			return (Criteria) this;
		}

		public Criteria andGrosswaterEqualTo(Float value) {
			addCriterion("grosswater =", value, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterNotEqualTo(Float value) {
			addCriterion("grosswater <>", value, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterGreaterThan(Float value) {
			addCriterion("grosswater >", value, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterGreaterThanOrEqualTo(Float value) {
			addCriterion("grosswater >=", value, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterLessThan(Float value) {
			addCriterion("grosswater <", value, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterLessThanOrEqualTo(Float value) {
			addCriterion("grosswater <=", value, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterIn(List<Float> values) {
			addCriterion("grosswater in", values, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterNotIn(List<Float> values) {
			addCriterion("grosswater not in", values, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterBetween(Float value1, Float value2) {
			addCriterion("grosswater between", value1, value2, "grosswater");
			return (Criteria) this;
		}

		public Criteria andGrosswaterNotBetween(Float value1, Float value2) {
			addCriterion("grosswater not between", value1, value2, "grosswater");
			return (Criteria) this;
		}

		public Criteria andAddedpowerIsNull() {
			addCriterion("addedpower is null");
			return (Criteria) this;
		}

		public Criteria andAddedpowerIsNotNull() {
			addCriterion("addedpower is not null");
			return (Criteria) this;
		}

		public Criteria andAddedpowerEqualTo(Float value) {
			addCriterion("addedpower =", value, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerNotEqualTo(Float value) {
			addCriterion("addedpower <>", value, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerGreaterThan(Float value) {
			addCriterion("addedpower >", value, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerGreaterThanOrEqualTo(Float value) {
			addCriterion("addedpower >=", value, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerLessThan(Float value) {
			addCriterion("addedpower <", value, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerLessThanOrEqualTo(Float value) {
			addCriterion("addedpower <=", value, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerIn(List<Float> values) {
			addCriterion("addedpower in", values, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerNotIn(List<Float> values) {
			addCriterion("addedpower not in", values, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerBetween(Float value1, Float value2) {
			addCriterion("addedpower between", value1, value2, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedpowerNotBetween(Float value1, Float value2) {
			addCriterion("addedpower not between", value1, value2, "addedpower");
			return (Criteria) this;
		}

		public Criteria andAddedelectrIsNull() {
			addCriterion("addedelectr is null");
			return (Criteria) this;
		}

		public Criteria andAddedelectrIsNotNull() {
			addCriterion("addedelectr is not null");
			return (Criteria) this;
		}

		public Criteria andAddedelectrEqualTo(Float value) {
			addCriterion("addedelectr =", value, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrNotEqualTo(Float value) {
			addCriterion("addedelectr <>", value, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrGreaterThan(Float value) {
			addCriterion("addedelectr >", value, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrGreaterThanOrEqualTo(Float value) {
			addCriterion("addedelectr >=", value, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrLessThan(Float value) {
			addCriterion("addedelectr <", value, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrLessThanOrEqualTo(Float value) {
			addCriterion("addedelectr <=", value, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrIn(List<Float> values) {
			addCriterion("addedelectr in", values, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrNotIn(List<Float> values) {
			addCriterion("addedelectr not in", values, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrBetween(Float value1, Float value2) {
			addCriterion("addedelectr between", value1, value2, "addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedelectrNotBetween(Float value1, Float value2) {
			addCriterion("addedelectr not between", value1, value2,
					"addedelectr");
			return (Criteria) this;
		}

		public Criteria andAddedwaterIsNull() {
			addCriterion("addedwater is null");
			return (Criteria) this;
		}

		public Criteria andAddedwaterIsNotNull() {
			addCriterion("addedwater is not null");
			return (Criteria) this;
		}

		public Criteria andAddedwaterEqualTo(Float value) {
			addCriterion("addedwater =", value, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterNotEqualTo(Float value) {
			addCriterion("addedwater <>", value, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterGreaterThan(Float value) {
			addCriterion("addedwater >", value, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterGreaterThanOrEqualTo(Float value) {
			addCriterion("addedwater >=", value, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterLessThan(Float value) {
			addCriterion("addedwater <", value, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterLessThanOrEqualTo(Float value) {
			addCriterion("addedwater <=", value, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterIn(List<Float> values) {
			addCriterion("addedwater in", values, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterNotIn(List<Float> values) {
			addCriterion("addedwater not in", values, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterBetween(Float value1, Float value2) {
			addCriterion("addedwater between", value1, value2, "addedwater");
			return (Criteria) this;
		}

		public Criteria andAddedwaterNotBetween(Float value1, Float value2) {
			addCriterion("addedwater not between", value1, value2, "addedwater");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to
	 * the database table sme_corp_energy
	 * 
	 * @mbggenerated do_not_delete_during_merge Tue Jul 26 11:06:57 CST 2016
	 */
	public static class Criteria extends GeneratedCriteria {

		protected Criteria() {
			super();
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to
	 * the database table sme_corp_energy
	 * 
	 * @mbggenerated Tue Jul 26 11:06:57 CST 2016
	 */
	public static class Criterion {
		private String condition;

		private Object value;

		private Object secondValue;

		private boolean noValue;

		private boolean singleValue;

		private boolean betweenValue;

		private boolean listValue;

		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue,
				String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}
}