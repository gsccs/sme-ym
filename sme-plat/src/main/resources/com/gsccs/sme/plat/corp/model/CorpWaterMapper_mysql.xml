<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gsccs.sme.plat.corp.dao.CorpWaterMapper">
	<resultMap id="BaseResultMap" type="com.gsccs.sme.api.domain.corp.CorpWater">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="corpid" jdbcType="BIGINT" property="corpid" />
		<result column="year" jdbcType="INTEGER" property="year" />
		<result column="month" jdbcType="INTEGER" property="month" />
		<result column="q_db" jdbcType="REAL" property="qDb" />
		<result column="q_dx" jdbcType="REAL" property="qDx" />
		<result column="q_zl" jdbcType="REAL" property="qZl" />
		<result column="q_qt" jdbcType="REAL" property="qQt" />
		<result column="q_sum" jdbcType="REAL" property="qSum" />
		<result column="y_gynew" jdbcType="REAL" property="yGynew" />
		<result column="y_fgynew" jdbcType="REAL" property="yFgynew" />
		<result column="y_wgnew" jdbcType="REAL" property="yWgnew" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, corpid, year, month, q_db, q_dx, q_zl, q_qt, q_sum, y_gynew,
		y_fgynew, y_wgnew
	</sql>
	<select id="selectByExample" parameterType="com.gsccs.sme.plat.corp.model.CorpWaterExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from sme_corp_water
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from sme_corp_water
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from sme_corp_water
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<delete id="deleteByExample" parameterType="com.gsccs.sme.plat.corp.model.CorpWaterExample">
		delete from sme_corp_water
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" useGeneratedKeys="true" keyProperty="id"
		parameterType="com.gsccs.sme.api.domain.corp.CorpWater">
		insert into sme_corp_water (id, corpid, year,
		month, q_db, q_dx, q_zl,
		q_qt, q_sum, y_gynew, y_fgynew,
		y_wgnew)
		values (#{id,jdbcType=BIGINT}, #{corpid,jdbcType=BIGINT},
		#{year,jdbcType=INTEGER},
		#{month,jdbcType=INTEGER}, #{qDb,jdbcType=REAL}, #{qDx,jdbcType=REAL}, #{qZl,jdbcType=REAL},
		#{qQt,jdbcType=REAL}, #{qSum,jdbcType=REAL}, #{yGynew,jdbcType=REAL},
		#{yFgynew,jdbcType=REAL},
		#{yWgnew,jdbcType=REAL})
	</insert>
	<insert id="insertSelective" parameterType="com.gsccs.sme.api.domain.corp.CorpWater">
		insert into sme_corp_water
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="corpid != null">
				corpid,
			</if>
			<if test="year != null">
				year,
			</if>
			<if test="month != null">
				month,
			</if>
			<if test="qDb != null">
				q_db,
			</if>
			<if test="qDx != null">
				q_dx,
			</if>
			<if test="qZl != null">
				q_zl,
			</if>
			<if test="qQt != null">
				q_qt,
			</if>
			<if test="qSum != null">
				q_sum,
			</if>
			<if test="yGynew != null">
				y_gynew,
			</if>
			<if test="yFgynew != null">
				y_fgynew,
			</if>
			<if test="yWgnew != null">
				y_wgnew,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="corpid != null">
				#{corpid,jdbcType=BIGINT},
			</if>
			<if test="year != null">
				#{year,jdbcType=INTEGER},
			</if>
			<if test="month != null">
				#{month,jdbcType=INTEGER},
			</if>
			<if test="qDb != null">
				#{qDb,jdbcType=REAL},
			</if>
			<if test="qDx != null">
				#{qDx,jdbcType=REAL},
			</if>
			<if test="qZl != null">
				#{qZl,jdbcType=REAL},
			</if>
			<if test="qQt != null">
				#{qQt,jdbcType=REAL},
			</if>
			<if test="qSum != null">
				#{qSum,jdbcType=REAL},
			</if>
			<if test="yGynew != null">
				#{yGynew,jdbcType=REAL},
			</if>
			<if test="yFgynew != null">
				#{yFgynew,jdbcType=REAL},
			</if>
			<if test="yWgnew != null">
				#{yWgnew,jdbcType=REAL},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.gsccs.sme.plat.corp.model.CorpWaterExample"
		resultType="java.lang.Integer">
		select count(*) from sme_corp_water
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update sme_corp_water
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=BIGINT},
			</if>
			<if test="record.corpid != null">
				corpid = #{record.corpid,jdbcType=BIGINT},
			</if>
			<if test="record.year != null">
				year = #{record.year,jdbcType=INTEGER},
			</if>
			<if test="record.month != null">
				month = #{record.month,jdbcType=INTEGER},
			</if>
			<if test="record.qDb != null">
				q_db = #{record.qDb,jdbcType=REAL},
			</if>
			<if test="record.qDx != null">
				q_dx = #{record.qDx,jdbcType=REAL},
			</if>
			<if test="record.qZl != null">
				q_zl = #{record.qZl,jdbcType=REAL},
			</if>
			<if test="record.qQt != null">
				q_qt = #{record.qQt,jdbcType=REAL},
			</if>
			<if test="record.qSum != null">
				q_sum = #{record.qSum,jdbcType=REAL},
			</if>
			<if test="record.yGynew != null">
				y_gynew = #{record.yGynew,jdbcType=REAL},
			</if>
			<if test="record.yFgynew != null">
				y_fgynew = #{record.yFgynew,jdbcType=REAL},
			</if>
			<if test="record.yWgnew != null">
				y_wgnew = #{record.yWgnew,jdbcType=REAL},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Tue Jul 26 
			11:09:03 CST 2016. -->
		update sme_corp_water
		set id = #{record.id,jdbcType=BIGINT},
		corpid = #{record.corpid,jdbcType=BIGINT},
		year = #{record.year,jdbcType=INTEGER},
		month = #{record.month,jdbcType=INTEGER},
		q_db = #{record.qDb,jdbcType=REAL},
		q_dx = #{record.qDx,jdbcType=REAL},
		q_zl = #{record.qZl,jdbcType=REAL},
		q_qt = #{record.qQt,jdbcType=REAL},
		q_sum = #{record.qSum,jdbcType=REAL},
		y_gynew = #{record.yGynew,jdbcType=REAL},
		y_fgynew = #{record.yFgynew,jdbcType=REAL},
		y_wgnew = #{record.yWgnew,jdbcType=REAL}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.gsccs.sme.api.domain.corp.CorpWater">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Tue Jul 26 
			11:09:03 CST 2016. -->
		update sme_corp_water
		<set>
			<if test="corpid != null">
				corpid = #{corpid,jdbcType=BIGINT},
			</if>
			<if test="year != null">
				year = #{year,jdbcType=INTEGER},
			</if>
			<if test="month != null">
				month = #{month,jdbcType=INTEGER},
			</if>
			<if test="qDb != null">
				q_db = #{qDb,jdbcType=REAL},
			</if>
			<if test="qDx != null">
				q_dx = #{qDx,jdbcType=REAL},
			</if>
			<if test="qZl != null">
				q_zl = #{qZl,jdbcType=REAL},
			</if>
			<if test="qQt != null">
				q_qt = #{qQt,jdbcType=REAL},
			</if>
			<if test="qSum != null">
				q_sum = #{qSum,jdbcType=REAL},
			</if>
			<if test="yGynew != null">
				y_gynew = #{yGynew,jdbcType=REAL},
			</if>
			<if test="yFgynew != null">
				y_fgynew = #{yFgynew,jdbcType=REAL},
			</if>
			<if test="yWgnew != null">
				y_wgnew = #{yWgnew,jdbcType=REAL},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.gsccs.sme.api.domain.corp.CorpWater">
		update sme_corp_water
		set corpid = #{corpid,jdbcType=BIGINT},
		year = #{year,jdbcType=INTEGER},
		month = #{month,jdbcType=INTEGER},
		q_db = #{qDb,jdbcType=REAL},
		q_dx = #{qDx,jdbcType=REAL},
		q_zl = #{qZl,jdbcType=REAL},
		q_qt = #{qQt,jdbcType=REAL},
		q_sum = #{qSum,jdbcType=REAL},
		y_gynew = #{yGynew,jdbcType=REAL},
		y_fgynew = #{yFgynew,jdbcType=REAL},
		y_wgnew = #{yWgnew,jdbcType=REAL}
		where id = #{id,jdbcType=BIGINT}
	</update>
</mapper>